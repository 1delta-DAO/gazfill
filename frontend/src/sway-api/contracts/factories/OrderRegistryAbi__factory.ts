/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.93.0
  Forc version: 0.62.0
  Fuel-Core version: 0.31.0
*/

import { Interface, Contract, ContractFactory } from "fuels";
import type { Provider, Account, AbstractAddress, BytesLike, DeployContractOptions, StorageSlot, DeployContractResult } from "fuels";
import type { OrderRegistryAbi, OrderRegistryAbiInterface } from "../OrderRegistryAbi";

const _abi = {
  "encoding": "1",
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "enum Error",
      "components": [
        {
          "name": "OrderNotDefined",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "OrderReenter",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "TryToFillMoreThanRequired",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "SentAssetIdDoesNotMatchMakerToken",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "SentAssetAmountDoesNotMatchFillAmount",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InsufficientTakerTokensReceivedFromCallback",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "OnlySettlementCanInteract",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "AlreadyIntitialized",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "MakerHasNotEnoughFunds",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "struct Address",
      "components": [
        {
          "name": "bits",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "struct LimitOrder",
      "components": [
        {
          "name": "maker_token",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "taker_token",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "maker_amount",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "taker_amount",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "maker",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "taker",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "nonce",
          "type": 5,
          "typeArguments": null
        },
        {
          "name": "expriy",
          "type": 6,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "u256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "u64",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "hash",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "cancel_order",
      "output": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "expriy",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "taker_amount",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "taker_asset",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "taker",
          "type": 3,
          "typeArguments": null
        }
      ],
      "name": "create_order",
      "output": {
        "name": "",
        "type": 1,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "hash",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "get_order",
      "output": {
        "name": "",
        "type": 4,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "settlement",
          "type": 3,
          "typeArguments": null
        }
      ],
      "name": "initialize",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "maker",
          "type": 3,
          "typeArguments": null
        },
        {
          "name": "maker_asset",
          "type": 1,
          "typeArguments": null
        },
        {
          "name": "maker_amount",
          "type": 6,
          "typeArguments": null
        },
        {
          "name": "receiver",
          "type": 3,
          "typeArguments": null
        }
      ],
      "name": "pull_maker_funds",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "15094927136620789666",
      "loggedType": {
        "name": "",
        "type": 2,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const _storageSlots: StorageSlot[] = [
  {
    "key": "6032ed362ebdb82937bc5b07f5fad91930b43d40de82d5679def24b27f7612b1",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export const OrderRegistryAbi__factory = {
  abi: _abi,

  storageSlots: _storageSlots,

  createInterface(): OrderRegistryAbiInterface {
    return new Interface(_abi) as unknown as OrderRegistryAbiInterface
  },

  connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): OrderRegistryAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as OrderRegistryAbi
  },

  async deployContract(
    bytecode: BytesLike,
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<OrderRegistryAbi>> {
    const factory = new ContractFactory(bytecode, _abi, wallet);

    return factory.deployContract<OrderRegistryAbi>({
      storageSlots: _storageSlots,
      ...options,
    });
  },
}
